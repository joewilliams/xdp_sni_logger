// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type xdp_sni_loggerSni struct {
	_    structs.HostLayout
	Len  uint8
	Name [255]uint8
}

// loadXdp_sni_logger returns the embedded CollectionSpec for xdp_sni_logger.
func loadXdp_sni_logger() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_sni_loggerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_sni_logger: %w", err)
	}

	return spec, err
}

// loadXdp_sni_loggerObjects loads xdp_sni_logger and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_sni_loggerObjects
//	*xdp_sni_loggerPrograms
//	*xdp_sni_loggerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_sni_loggerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_sni_logger()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_sni_loggerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_sni_loggerSpecs struct {
	xdp_sni_loggerProgramSpecs
	xdp_sni_loggerMapSpecs
	xdp_sni_loggerVariableSpecs
}

// xdp_sni_loggerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_sni_loggerProgramSpecs struct {
	XdpProgFunc *ebpf.ProgramSpec `ebpf:"xdp_prog_func"`
}

// xdp_sni_loggerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_sni_loggerMapSpecs struct {
	Rb *ebpf.MapSpec `ebpf:"rb"`
}

// xdp_sni_loggerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_sni_loggerVariableSpecs struct {
}

// xdp_sni_loggerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_sni_loggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_sni_loggerObjects struct {
	xdp_sni_loggerPrograms
	xdp_sni_loggerMaps
	xdp_sni_loggerVariables
}

func (o *xdp_sni_loggerObjects) Close() error {
	return _Xdp_sni_loggerClose(
		&o.xdp_sni_loggerPrograms,
		&o.xdp_sni_loggerMaps,
	)
}

// xdp_sni_loggerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_sni_loggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_sni_loggerMaps struct {
	Rb *ebpf.Map `ebpf:"rb"`
}

func (m *xdp_sni_loggerMaps) Close() error {
	return _Xdp_sni_loggerClose(
		m.Rb,
	)
}

// xdp_sni_loggerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_sni_loggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_sni_loggerVariables struct {
}

// xdp_sni_loggerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_sni_loggerObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_sni_loggerPrograms struct {
	XdpProgFunc *ebpf.Program `ebpf:"xdp_prog_func"`
}

func (p *xdp_sni_loggerPrograms) Close() error {
	return _Xdp_sni_loggerClose(
		p.XdpProgFunc,
	)
}

func _Xdp_sni_loggerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_sni_logger_bpfel.o
var _Xdp_sni_loggerBytes []byte
